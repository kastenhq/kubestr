// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kastenhq/kubestr/pkg/csi (interfaces: SnapshotBrowserStepper)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/kastenhq/kubestr/pkg/csi/types"
	v1 "github.com/kubernetes-csi/external-snapshotter/client/v4/apis/volumesnapshot/v1"
	v10 "k8s.io/api/core/v1"
	v11 "k8s.io/api/storage/v1"
)

// MockSnapshotBrowserStepper is a mock of SnapshotBrowserStepper interface.
type MockSnapshotBrowserStepper struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotBrowserStepperMockRecorder
}

// MockSnapshotBrowserStepperMockRecorder is the mock recorder for MockSnapshotBrowserStepper.
type MockSnapshotBrowserStepperMockRecorder struct {
	mock *MockSnapshotBrowserStepper
}

// NewMockSnapshotBrowserStepper creates a new mock instance.
func NewMockSnapshotBrowserStepper(ctrl *gomock.Controller) *MockSnapshotBrowserStepper {
	mock := &MockSnapshotBrowserStepper{ctrl: ctrl}
	mock.recorder = &MockSnapshotBrowserStepperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotBrowserStepper) EXPECT() *MockSnapshotBrowserStepperMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockSnapshotBrowserStepper) Cleanup(arg0 context.Context, arg1 *v10.PersistentVolumeClaim, arg2 *v10.Pod) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup", arg0, arg1, arg2)
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockSnapshotBrowserStepperMockRecorder) Cleanup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockSnapshotBrowserStepper)(nil).Cleanup), arg0, arg1, arg2)
}

// CreateInspectorApplication mocks base method.
func (m *MockSnapshotBrowserStepper) CreateInspectorApplication(arg0 context.Context, arg1 *types.SnapshotBrowseArgs, arg2 *v1.VolumeSnapshot, arg3 *v11.StorageClass) (*v10.Pod, *v10.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInspectorApplication", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v10.Pod)
	ret1, _ := ret[1].(*v10.PersistentVolumeClaim)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateInspectorApplication indicates an expected call of CreateInspectorApplication.
func (mr *MockSnapshotBrowserStepperMockRecorder) CreateInspectorApplication(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInspectorApplication", reflect.TypeOf((*MockSnapshotBrowserStepper)(nil).CreateInspectorApplication), arg0, arg1, arg2, arg3)
}

// ExecuteTreeCommand mocks base method.
func (m *MockSnapshotBrowserStepper) ExecuteTreeCommand(arg0 context.Context, arg1 *types.SnapshotBrowseArgs, arg2 *v10.Pod) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTreeCommand", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteTreeCommand indicates an expected call of ExecuteTreeCommand.
func (mr *MockSnapshotBrowserStepperMockRecorder) ExecuteTreeCommand(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTreeCommand", reflect.TypeOf((*MockSnapshotBrowserStepper)(nil).ExecuteTreeCommand), arg0, arg1, arg2)
}

// FetchVS mocks base method.
func (m *MockSnapshotBrowserStepper) FetchVS(arg0 context.Context, arg1 *types.SnapshotBrowseArgs) (*v1.VolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchVS", arg0, arg1)
	ret0, _ := ret[0].(*v1.VolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchVS indicates an expected call of FetchVS.
func (mr *MockSnapshotBrowserStepperMockRecorder) FetchVS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchVS", reflect.TypeOf((*MockSnapshotBrowserStepper)(nil).FetchVS), arg0, arg1)
}

// PortForwardAPod mocks base method.
func (m *MockSnapshotBrowserStepper) PortForwardAPod(arg0 context.Context, arg1 *v10.Pod, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortForwardAPod", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PortForwardAPod indicates an expected call of PortForwardAPod.
func (mr *MockSnapshotBrowserStepperMockRecorder) PortForwardAPod(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortForwardAPod", reflect.TypeOf((*MockSnapshotBrowserStepper)(nil).PortForwardAPod), arg0, arg1, arg2)
}

// ValidateArgs mocks base method.
func (m *MockSnapshotBrowserStepper) ValidateArgs(arg0 context.Context, arg1 *types.SnapshotBrowseArgs) (*v1.VolumeSnapshot, *v11.StorageClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateArgs", arg0, arg1)
	ret0, _ := ret[0].(*v1.VolumeSnapshot)
	ret1, _ := ret[1].(*v11.StorageClass)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateArgs indicates an expected call of ValidateArgs.
func (mr *MockSnapshotBrowserStepperMockRecorder) ValidateArgs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateArgs", reflect.TypeOf((*MockSnapshotBrowserStepper)(nil).ValidateArgs), arg0, arg1)
}
