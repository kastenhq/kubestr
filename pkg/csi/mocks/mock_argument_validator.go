// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kastenhq/kubestr/pkg/csi (interfaces: ArgumentValidator)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/kubernetes-csi/external-snapshotter/client/v4/apis/volumesnapshot/v1"
	v10 "k8s.io/api/core/v1"
	v11 "k8s.io/api/storage/v1"
	v12 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// MockArgumentValidator is a mock of ArgumentValidator interface.
type MockArgumentValidator struct {
	ctrl     *gomock.Controller
	recorder *MockArgumentValidatorMockRecorder
}

// MockArgumentValidatorMockRecorder is the mock recorder for MockArgumentValidator.
type MockArgumentValidatorMockRecorder struct {
	mock *MockArgumentValidator
}

// NewMockArgumentValidator creates a new mock instance.
func NewMockArgumentValidator(ctrl *gomock.Controller) *MockArgumentValidator {
	mock := &MockArgumentValidator{ctrl: ctrl}
	mock.recorder = &MockArgumentValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArgumentValidator) EXPECT() *MockArgumentValidatorMockRecorder {
	return m.recorder
}

// FetchPV mocks base method.
func (m *MockArgumentValidator) FetchPV(arg0 context.Context, arg1 string) (*v10.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPV", arg0, arg1)
	ret0, _ := ret[0].(*v10.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPV indicates an expected call of FetchPV.
func (mr *MockArgumentValidatorMockRecorder) FetchPV(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPV", reflect.TypeOf((*MockArgumentValidator)(nil).FetchPV), arg0, arg1)
}

// ValidateNamespace mocks base method.
func (m *MockArgumentValidator) ValidateNamespace(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateNamespace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateNamespace indicates an expected call of ValidateNamespace.
func (mr *MockArgumentValidatorMockRecorder) ValidateNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateNamespace", reflect.TypeOf((*MockArgumentValidator)(nil).ValidateNamespace), arg0, arg1)
}

// ValidatePVC mocks base method.
func (m *MockArgumentValidator) ValidatePVC(arg0 context.Context, arg1, arg2 string) (*v10.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePVC", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v10.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatePVC indicates an expected call of ValidatePVC.
func (mr *MockArgumentValidatorMockRecorder) ValidatePVC(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePVC", reflect.TypeOf((*MockArgumentValidator)(nil).ValidatePVC), arg0, arg1, arg2)
}

// ValidateStorageClass mocks base method.
func (m *MockArgumentValidator) ValidateStorageClass(arg0 context.Context, arg1 string) (*v11.StorageClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateStorageClass", arg0, arg1)
	ret0, _ := ret[0].(*v11.StorageClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateStorageClass indicates an expected call of ValidateStorageClass.
func (mr *MockArgumentValidatorMockRecorder) ValidateStorageClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateStorageClass", reflect.TypeOf((*MockArgumentValidator)(nil).ValidateStorageClass), arg0, arg1)
}

// ValidateVolumeSnapshot mocks base method.
func (m *MockArgumentValidator) ValidateVolumeSnapshot(arg0 context.Context, arg1, arg2 string, arg3 *v12.GroupVersionForDiscovery) (*v1.VolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVolumeSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v1.VolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateVolumeSnapshot indicates an expected call of ValidateVolumeSnapshot.
func (mr *MockArgumentValidatorMockRecorder) ValidateVolumeSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVolumeSnapshot", reflect.TypeOf((*MockArgumentValidator)(nil).ValidateVolumeSnapshot), arg0, arg1, arg2, arg3)
}

// ValidateVolumeSnapshotClass mocks base method.
func (m *MockArgumentValidator) ValidateVolumeSnapshotClass(arg0 context.Context, arg1 string, arg2 *v12.GroupVersionForDiscovery) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVolumeSnapshotClass", arg0, arg1, arg2)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateVolumeSnapshotClass indicates an expected call of ValidateVolumeSnapshotClass.
func (mr *MockArgumentValidatorMockRecorder) ValidateVolumeSnapshotClass(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVolumeSnapshotClass", reflect.TypeOf((*MockArgumentValidator)(nil).ValidateVolumeSnapshotClass), arg0, arg1, arg2)
}
